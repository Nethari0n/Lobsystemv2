@page "/EventChips"
@using System.Data
@using Lobsystem.Shared.DTO;
@using System.Web;


<div class="container">
    <div>
        <h3>Tilføj Chips til begivenhed.</h3>
    </div>
    <div style="margin-top: 2rem;" class="table-header d-flex btn-res justify-content-between">
        <div class="d-flex">
            <div>
                <p>Importer/exporter et excel ark med chips.</p>
                @*<button type="button" id="exportBtn" class="btn ml-1 mb-1 logoColor" onclick="ExportToExcel('xlsx')">Export tabel til Excel</button>*@
                @*<button type="button" id="exportBtn" class="btn ml-1 mb-1 logoColor" @onclick="ExportToExcel">Export tabel til Excel</button>*@
                <input type="button" class="btn ml-1 mb-1 logoColor" value="Auto tilføj med Excel" onclick="document.getElementById('ExcelFileUpload').click()">
                <a id="exportTemplateBtn" class="btn ml-1 mb-1 logoColor" href="/templates/TilføjChipSkabelon.xlsx" download="TilføjChipSkabelon.xlsx">Export Skabelon til Excel</a>
                <InputFile hidden id="ExcelFileUpload" OnChange="ImportExcelFile" />
            </div>
        </div>
        <div>
            <input class="form-control" type="text" id="search" @bind="SearchField" @oninput="(e => SearchField = e.Value.ToString())" @onkeyup="(e => {OnInitializedAsync(); CurrentPage = 1;})" placeholder="Søg på navn.." />
        </div>
    </div>
    <div class="TableScrollable">
        <table class="table searchTable table-striped paginated text-center" id="table">
            <thead>
                <tr>
                    <th>Lokal ID</th>
                    <th>UID</th>
                    <th>Låner ID</th>
                    <th>(Valgfrit) Gruppe 1</th>
                    <th>(Valgfrit) Gruppe 2</th>
                    <th class="thSorting">Handlinger</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Chip)
                {
                    int localChipID = item.ChipID;
                    <tr>
                        <td class="lineHeight">@item.ChipID</td>
                        <td class="lineHeight">@item.UID</td>
                        <td class="lineHeight">@item.LaanerID</td>
                        <td class="remove_td">
                            @*We use 1 to make sure that it only takes from Group 1.*@
                            <select class="form-control" @onchange="(e => {GroupChange((string)e.Value, item.ChipID, 1);})">
                                <option value="0">Vælg en gruppe</option>
                                @foreach (var group in Groups)
                                {
                                    bool group1Inserted = true;
                                    foreach (ChipGroup chipGroupDTO in chipGroupDTOs)
                                    {
                                        if (chipGroupDTO.ChipID == item.ChipID && chipGroupDTO.GroupID == group.GroupId && chipGroupDTO.EventID == SelectedEventID && chipGroupDTO.GroupNumber == 1) //We use 1 to make sure that it only takes from Group 1.
                                        {
                                            <option selected="selected" value="@group.GroupId">@group.GroupName</option>
                                            group1Inserted = false;
                                        }
                                    }
                                    if (group1Inserted)
                                    {
                                        <option value="@group.GroupId">@group.GroupName</option>
                                    }
                                }
                            </select>
                        </td>
                        <td class="remove_td">
                            <select class="form-control" @onchange="(e => {GroupChange((string)e.Value, item.ChipID, 2);})">
                                @*We use 2 to make sure that it only takes from Group 2.*@
                                <option selected="selected" value="0">Vælg en gruppe</option>
                                @foreach (var group in Groups)
                                {
                                    bool group2Inserted = true;
                                    foreach (ChipGroup chipGroupDTO in chipGroupDTOs)
                                    {
                                        if (chipGroupDTO.ChipID == item.ChipID && chipGroupDTO.GroupID == group.GroupId && chipGroupDTO.EventID == SelectedEventID && chipGroupDTO.GroupNumber == 2)//We use 2 to make sure that it only takes from Group 2.
                                        {
                                            <option selected="selected" value="@group.GroupId">@group.GroupName</option>
                                            group2Inserted = false;
                                        }
                                    }
                                    if (group2Inserted)
                                    {
                                        <option value="@group.GroupId">@group.GroupName</option>
                                    }
                                }
                            </select>
                        </td>
                        <td class="lineHeight">

                            @if (_RegistrationCaller.GetRegistrationByChipAndEventIdAsync(localChipID, SelectedEventID) != null)
                            {
                                <button type="button" class="hyperlink" @onclick="() => RemoveRegistration(localChipID)">Fjern</button>
                            }
                            else
                            {
                                <button type="button" class="hyperlink" @onclick="() => AddRegistrationAsync(localChipID,true)">Tilføj</button>
                            }
                            }
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <ul class="pagination">
                    @if (Count > 0 && TotalPages > 1)
                    {
                        bool previousPageIsEllipsis = false;

                        for (int i = 1; i <= TotalPages; i++)
                        {
                            int page = i;

                            if (i == CurrentPage)
                            {
                                <li class="page-item @(i == CurrentPage ? "active" : "")">
                                    <input type="button" @onclick="(e => {CurrentPage = page;OnInitializedAsync();})" class="page-link" value="@i" />
                                </li>

                                previousPageIsEllipsis = false;
                            }
                            else
                            {
                                if (i == 1
                                || i == CurrentPage - 2
                                || i == CurrentPage - 1
                                || i == CurrentPage + 1
                                || i == CurrentPage + 2
                                || i == TotalPages - 1
                                || i == TotalPages)
                                {
                                    <li class="page-item @(i == CurrentPage ? "active" : "")">
                                        <input type="button" @onclick="(e => {CurrentPage = page;OnInitializedAsync();})" class="page-link" value="@i" />
                                    </li>
                                }
                                else
                                {

                                    if (previousPageIsEllipsis) continue;
                                    else
                                    {
                                        <li class="page-item">
                                            <input class="page-link" style="width: 35px;" value="..." />
                                        </li>
                                        previousPageIsEllipsis = true;
                                    }
                                }
                            }
                        }
                    }
                </ul>
            </tfoot>
        </table>
    </div>

    <table hidden class="table searchTable table-striped paginated text-center" id="tableExport">
        <thead>
            <tr>
                <th>Lokal ID</th>
                <th>UID</th>
                <th>Låner ID</th>
                <th>Gruppe 1</th>
                <th>Gruppe 2</th>
                <th class="thSorting">Handlinger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Chip)
            {

                int localChipID = item.ChipID;
                <tr>
                    <td class="lineHeight">@item.ChipID</td>
                    <td class="lineHeight">@item.UID</td>
                    <td class="lineHeight">@item.LaanerID</td>
                    @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault() != null)
                    {
                        @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault().GroupNumber == 1)
                        {
                            ChipGroup chipGroupDTO = chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault();
                            ShowGroupDTO groupsDTO = Groups.Where(x => x.GroupId == chipGroupDTO.GroupID).FirstOrDefault();
                            @if (groupsDTO != null)
                            {
                                <td>@groupsDTO.GroupName</td>
                            }

                        }
                        else
                        {
                            <td>Ingen gruppe</td>
                        }
                    }
                    else
                    {
                        <td>Ingen gruppe</td>
                    }
                    @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault() != null)
                    {
                        @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault().GroupNumber == 2)
                        {
                            ChipGroup chipGroupDTO = chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault();
                            ShowGroupDTO groupsDTO = Groups.Where(x => x.GroupId == chipGroupDTO.GroupID).FirstOrDefault();
                            @if (groupsDTO != null)
                            {
                                <td>@groupsDTO.GroupName</td>
                            }
                        }
                        else
                        {
                            <td>Ingen gruppe</td>
                        }
                    }
                    else
                    {
                        <td>Ingen gruppe</td>
                    }

                    <td class="lineHeight">
                        @registration = _ChipGroupRegistrationService.GetRegistrationByChipAndEventId(localChipID, SelectedEventID);
                        @if (registration != null)
                        {
                            <button type="button" class="hyperlink" @onclick="() => RemoveRegistration(localChipID)">Fjern</button>
                        }
                        else
                        {
                            <button type="button" class="hyperlink" @onclick="() => AddRegistrationAsync(localChipID,true)">Tilføj</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>


    @* Toast validation*@
    <div aria-live="polite" aria-atomic="true">
        <div class="toast-container position-absolute top-0 end-0 p-3">
            <div class="toast align-items-center text-white bg-success border-0" id="ToastSucces" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body toast-icon">
                        <i style="font-size: 20px;" class="fa-solid fa-thumbs-up"></i>
                    </div>
                    <div class="toast-body toast-text">
                        @SuccesMessage
                    </div>
                </div>
            </div>
            <div class="toast align-items-center text-white bg-danger border-0" id="ToastError" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body toast-icon">
                        <i style="font-size: 20px;" class="fa-solid fa-circle-xmark"></i>
                    </div>
                    <div class="toast-body toast-text">
                        @FailedMessage
                    </div>
                </div>
            </div>
        </div>
    </div>

    <table class="table" hidden id="TemplateExcel">
        <thead>
            <tr>
                <th>UID</th>
            </tr>
        </thead>
    </table>

</div>
@code {

    #region Properties
    DataTable dt = new DataTable();

    private List<Chip> Chip { get; set; } = new();
    private List<ShowGroupDTO> Groups { get; set; }
    private List<ChipGroup> chipGroupDTOs { get; set; }
    private List<Registration> RegistrationDTOs { get; set; }

    private int SelectedEventID { get; set; }

    private Registration registration { get; set; }

    private string MyProperty { get; set; }
    private int Group1Hidden { get; set; }
    private int Group2Hidden { get; set; }

    private string SuccesMessage { get; set; }
    private string FailedMessage { get; set; }

    private string SearchField { get; set; }
    #endregion

    private int successCounter = 0;
    private bool _btnPress;

    #region Pagination

    private int CurrentPage { get; set; } = 1;
    private int Count { get; set; } = 0;
    private int TotalPages { get; set; }
    private int PageCount { get; set; } = 9;

    #endregion

    protected async override Task OnInitializedAsync()
    {

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var test = HttpUtility.ParseQueryString(uri.Query)["id"];
        if (int.TryParse(test, out int result))
        {
            //Int32.TryParse(value, out int result);
            SelectedEventID = result;
            StateHasChanged();
        }
        else
            navigationManager.NavigateTo("/", true);    //Returns to index site if no ID was submitted

        if (SearchField != null)
            await Search();
        else
            await GetLists();

        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageCount));
    }

    protected async Task GetLists()
    {
        Chip = await _ChipCaller.ChipPagination(CurrentPage, PageCount);
        Groups = await _GroupCaller.GetAllGroups();
        chipGroupDTOs = await _ChipGroupCaller.GetChipGroupsAsync();
        RegistrationDTOs = await _RegistrationCaller.GetAllRegistrationsAsync();
        var temp = await _ChipCaller.GetAllChips();
        Count = temp.Count();
        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageCount));
    }

    protected async Task Search()
    {
        Chip = await _ChipCaller.SearchChip(CurrentPage, PageCount, SearchField);
        var temp = await _ChipCaller.GetAllChips();
        Count = temp.Where(x => x.UID.Contains(SearchField) || x.LaanerID.Contains(SearchField)).ToList().Count();
    }

    /// <summary>
    /// Adds or updates the chipgroup
    /// </summary>
    /// <param name="group"></param>
    /// <param name="id"></param>
    /// <param name="groupNumber"></param>
    protected async Task GroupChange(string group, int id, int groupNumber)
    {
        ChipGroup chipGroupDTO = new ChipGroup
            {
                ChipID = id,
                GroupID = Convert.ToInt32(group),
                EventID = SelectedEventID,
                GroupNumber = groupNumber
            };
        if (group != "0") //If they return the dropdown to "Vælg en gruppe" then it should be removed instead.
        {
            if (await _ChipGroupCaller.ChipGroupExistsAsync(chipGroupDTO))
            {
                chipGroupDTO.ChipGroupID = await _ChipGroupCaller.GetChipGroupIDByChipGroupObjectAsync(chipGroupDTO);
                await _ChipGroupCaller.UpdateChipGroupAsync(chipGroupDTO);
                toastService.ShowSuccess("Chip grupped blev opdateret.");
            }
            else
            {
                await _ChipGroupCaller.CreateChipGroupAsync(chipGroupDTO);
                toastService.ShowSuccess("Chip grupped blev tilføjet.");

            }
        }
        else
        {
            await _ChipGroupCaller.DeleteChipGroupAsync(chipGroupDTO);
            toastService.ShowSuccess("Chip grupped blev fjernet.");

        }
        if (groupNumber == 1)
        {
            Group1Hidden = Convert.ToInt32(group);
        }
        else
        {
            Group2Hidden = Convert.ToInt32(group);
        }


        ReloadChipGroupList();
    }

    protected async Task ReloadChipGroupList()
    {
        chipGroupDTOs.Clear();
        chipGroupDTOs = await _ChipGroupCaller.GetChipGroupsAsync();
        StateHasChanged();
    }

    protected async Task AddRegistrationAsync(int id, bool btnPress)
    {
        _btnPress = btnPress;
        Registration registrationDTO = new Registration
            {
                ChipID = id,
                EventID = SelectedEventID,
                CreateDate = DateTime.Now
            };

        if (_RegistrationCaller.GetRegistrationByChipAndEventIdAsync(id, SelectedEventID) == null)
        {
            await _RegistrationCaller.CreateRegistrationAsync(registrationDTO);
            if (_btnPress)
            {
                await SuccessToastCallerAsync();
            }

        }

    }

    protected async Task RemoveRegistration(int id)
    {
        await _RegistrationCaller.DeleteRegistrationAsync(id, SelectedEventID);
        toastService.ShowSuccess("Chip blev fjernet fra event");

    }

    protected async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        int errorCounter = 0;

        var fileStream = e.File.OpenReadStream();
        MemoryStream ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        fileStream.Close();
        ms.Position = 0; //Makes the memoryStream go to the start of the list.

        char csvDelimiter = ';';

        dt = new DataTable();
        using (StreamReader sr = new StreamReader(ms))
        {
            string[] headers = sr.ReadLine().Split(csvDelimiter);
            foreach (string header in headers)
            {
                try
                {
                    dt.Columns.Add(header);
                }
                catch { }
            }
            while (!sr.EndOfStream)
            {
                string[] rows = sr.ReadLine().Split(csvDelimiter);
                DataRow dr = dt.NewRow();
                for (int i = 0; i < headers.Length; i++)
                {
                    dr[i] = rows[i];
                }
                dt.Rows.Add(dr);
            }

        }
        foreach (DataRow row in dt.Rows)
        {
            string chipUID = "";
            int excelCount = 0;

            foreach (DataColumn col in dt.Columns)
            {
                if (excelCount == 0)
                {
                    chipUID = (row[col.ColumnName].ToString());
                };
                excelCount++;
            }


            int chipID = await _ChipCaller.GetChipIDByChipUID(chipUID);
            if (chipID > 0)
            {
                await AddRegistrationAsync(chipID, false);
                successCounter++;
            }
            else
            {
                errorCounter++;
            }

        }
        if (errorCounter > 0)
        {
            toastService.ShowError($"fejl i upload, Antal chips fejlede: {errorCounter}");
            errorCounter = 0;
        }
        if (successCounter > 0)
        {
            _btnPress = false;
            await SuccessToastCallerAsync();

        }
        StateHasChanged();

    }

    protected async Task SuccessToastCallerAsync()
    {
        if (_btnPress)
        {
            toastService.ShowSuccess("Chip blev tilføjet til event.");
        }
        else
        {
            toastService.ShowSuccess($"Antal chips tilføjet til event: {successCounter}");
            successCounter = 0;
        }



    }


    protected void ExportToExcel()
    {
        ////Create the document.
        //IWorkbook workbook = new XSSFWorkbook();
        ////Create the sheet inside the document with the corresponding name.
        //ISheet excelSheet = workbook.CreateSheet("Sheet1");
        ////Create a new styling which can be applied to cells.
        //ICellStyle cellStyle = workbook.CreateCellStyle();
        //cellStyle.DataFormat = workbook.CreateDataFormat().GetFormat("text");

        ////Create the name of the columns in the first row.
        //IRow headerRow = excelSheet.CreateRow(0);
        //headerRow.CreateCell(0).SetCellValue("Lokal ID");
        //headerRow.CreateCell(1).SetCellValue("UID");
        //headerRow.CreateCell(2).SetCellValue("Låner ID");
        //headerRow.CreateCell(3).SetCellValue("Gruppe 1");
        //headerRow.CreateCell(4).SetCellValue("Gruppe 2");
        //headerRow.CreateCell(5).SetCellValue("Del af event");

        //int rowNumber = 1;

        //foreach (Chip item in Chip) //Creates the excel.
        //{
        //    IRow row = excelSheet.CreateRow(rowNumber++);

        //    row.CreateCell(0).SetCellValue(item.ChipID);
        //    row.GetCell(0).CellStyle = cellStyle;
        //    row.CreateCell(1).SetCellValue(item.UID);
        //    row.GetCell(1).CellStyle = cellStyle;
        //    row.CreateCell(2).SetCellValue(item.LaanerID);
        //    row.GetCell(2).CellStyle = cellStyle;

        //    if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault() != null)
        //    {
        //        @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault().GroupNumber == 1)
        //        {
        //            ChipGroup chipGroupDTO = chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault();
        //            Group groupsDTO = Groups.Where(x => x.GroupID == chipGroupDTO.GroupID).FirstOrDefault();
        //            row.CreateCell(3).SetCellValue(groupsDTO.GroupName);
        //        }
        //        else
        //        {
        //            row.CreateCell(3).SetCellValue("Ingen gruppe");
        //        }
        //    }
        //    else
        //    {
        //        row.CreateCell(3).SetCellValue("Ingen gruppe");
        //    }
        //    if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault() != null)
        //    {
        //        @if (chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault().GroupNumber == 2)
        //        {
        //            ChipGroup chipGroupDTO = chipGroupDTOs.Where(x => x.ChipID == item.ChipID).FirstOrDefault();
        //            Group groupsDTO = Groups.Where(x => x.GroupID == chipGroupDTO.GroupID).FirstOrDefault();
        //            row.CreateCell(4).SetCellValue(groupsDTO.GroupName);
        //        }
        //        else
        //        {
        //            row.CreateCell(4).SetCellValue("Ingen gruppe");
        //        }
        //    }
        //    else
        //    {
        //        row.CreateCell(4).SetCellValue("Ingen gruppe");
        //    }

        //    if (_ChipGroupRegistrationService.GetRegistrationByChipAndEventId(item.ChipID, SelectedEventID) != null)
        //    {
        //        row.CreateCell(5).SetCellValue("Del af dette event");
        //    }
        //    else
        //    {
        //        row.CreateCell(5).SetCellValue("Ikke del af dette event");
        //    }
        //}



    }
}
