@page "/Rapport"
@using Lobsystem.Shared.DTO;
@using System.Threading
@using System.Web;
@inject IJSRuntime JsRuntime


<div class="container End-rapport">
    <div>
        <h1 class="text-center">Afsluttende Rapport for @EventName</h1>
    </div>
    <button type="button" id="exportBtn" class="btn ml-1 mb-1 logoColor" @onclick="async () => await ExportCSVFile()">Export tabel til Excel</button>
    <button type="button" id="exportBtn" class="btn ml-1 mb-1 logoColor" @onclick="async () => await ExportAllGroups()">Export Alle Grupper til Excel</button>
    <div class="row">
        <div class="col-auto col-md-auto col-sm-auto">
            <select class="form-control col-5" @onchange="(e => {SortAfterGroupOne((string)e.Value);})">
                <option>@GroupOneSortText</option>
                @foreach (var item in ChipGroups)
                {
                    if (item.GroupNumber == 1)
                    {
                        <option value="@item.GroupName">@item.GroupName</option>
                    }

                }
            </select>
        </div>
        <div class="col-auto col-md-auto col-sm-auto">
            <select class="form-control" @onchange="(e => {SortAfterGroupTwo((string)e.Value);})">
                <option>@GroupTwoSortText</option>
                @foreach (var item in ChipGroups)
                {
                    if (item.GroupNumber == 2)
                    {
                        <option value="@item.GroupName">@item.GroupName</option>
                    }
                }


            </select>
        </div>
    </div>
    <div class="table-responsive">
        <div class="TableScrollable rapport">
            <table id="table" class="table table-striped">
                <thead>
                    <tr class="text-center">
                        <th scope="col">Rangering</th>
                        <th scope="col">Låner Nummer</th>
                        <th scope="col">Gruppe 1</th>
                        <th scope="col">Gruppe 2</th>
                        <th scope="col">Seneste Registrering</th>
                        <th scope="col">Registeringer</th>
                        <th scope="col">Tid siden Start og seneste skan</th>
                        <th scope="col">Hurtigste Skan</th>
                        <th scope="col">Distance</th>
                        <th scope="col">Handling</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Rapports != null)
                    {
                        foreach (EndRapport item in Rapports)
                        {
                            <tr class="text-center">
                                @{
                                    Counter = Rapports.IndexOf(item) + 1;
                                    <td scope="row">@Counter</td>
                                }
                                <td>@item.LaanerID</td>
                                <td>@item.Group1</td>
                                <td>@item.Group2</td>
                                <td>@item.LatestRecord.ToString("HH:mm:ss")</td>
                                <td>@item.Recordings</td>
                                <td>@item.TimeBetweenStartAndLatestScan.Duration().ToString(@"dd\:hh\:mm\:ss")</td>
                                <td>@item.FastestScan.Duration().ToString(@"dd\:hh\:mm\:ss")</td>
                                <td>@item.DistanceRun</td>
                                <td>
                                    <a type="button" @onclick="() => GetScans(item.ChipID)" class="hyperlink" data-bs-toggle="modal" data-bs-target="#exampleModal">Se Skanninger</a>
                                </td>
                            </tr>



                        }
                    }
                </tbody>
            </table>
        </div>
    </div>



    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Chip Nummer: @ChipId </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="TableScrollable Rapport-Table-Height">
                    <div class="modal-body">
                        <table class="table table-striped">
                            <thead>
                                <tr class="text-center">
                                    <th scope="col">Scanning Id</th>
                                    <th scope="col">Tid på scanning</th>
                                    <th scope="col">Handling</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Scannings != null)
                                {
                                    @foreach (var item in Scannings)
                                    {
                                        <tr class="text-center">
                                            <th scope="row">@item.ScanningID</th>
                                            <td>@item.TimeStamp</td>
                                            <td><button @onclick="() => DeleteScan(item,Value)" class="btn btn-danger">Slet Skanning</button></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    <div class="TableScrollable rapport">
        <table id="table-hidden" class="table table-striped">
            <thead>
                <tr class="text-center">
                    <th scope="col">Rangering</th>
                    <th scope="col">Låner Nummer</th>
                    <th scope="col">Gruppe 1</th>
                    <th scope="col">Gruppe 2</th>
                    <th scope="col">Seneste Registrering</th>
                    <th scope="col">Registeringer</th>
                    <th scope="col">Tid siden Start og seneste skan</th>
                    <th scope="col">Hurtigste Skan</th>
                    <th scope="col">Distance</th>
                    <th scope="col">Handling</th>
                </tr>
            </thead>
            <tbody>
                @if (Rapports != null)
                {
                    foreach (EndRapport item in HiddenRapports)
                    {
                        <tr class="text-center">
                            @{
                                Counter = Rapports.IndexOf(item) + 1;
                                <td scope="row">@Counter</td>
                            }
                            <td>@item.LaanerID</td>
                            <td>@item.Group1</td>
                            <td>@item.Group2</td>
                            <td>@item.LatestRecord.ToString("HH:mm:ss")</td>
                            <td>@item.Recordings</td>
                            <td>@item.TimeBetweenStartAndLatestScan.Duration().ToString(@"dd\:hh\:mm\:ss")</td>
                            <td>@item.FastestScan.Duration().ToString(@"dd\:hh\:mm\:ss")</td>
                            <td>@item.DistanceRun</td>
                            <td>
                                <a type="button" @onclick="() => GetScans(item.ChipID)" class="hyperlink" data-bs-toggle="modal" data-bs-target="#exampleModal">Se Skanninger</a>
                            </td>
                        </tr>



                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {

    #region Proberties
    public int Value { get; set; }
    public int Counter { get; set; } = 1;
    public int ChipId { get; set; }
    public string EventName { get; set; }
    public string GroupOneSort { get; set; }
    public string GroupOneSortText { get; set; } = "Vælg en Gruppe til Sortering af Gruppe 1";
    public string GroupTwoSort { get; set; }
    public string GroupTwoSortText { get; set; } = "Vælg en Gruppe til Sortering af Gruppe 2";

    public List<GroupIdAndGroupNameDTO> ChipGroups { get; set; } = new();
    public List<EndRapport> Rapports { get; set; } = new();
    public List<Scanning> Scannings { get; set; } = new();
    public List<EndRapport> HiddenRapports { get; set; } = new();

    private IJSObjectReference _jsModule;

    #endregion


    protected override async void OnInitialized()
    {

        Counter = 1;
        _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/ExportCSV.js");

        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var test = HttpUtility.ParseQueryString(uri.Query)["id"];
        if (int.TryParse(test, out int result))
        {
            Value = result;
            Event @event = await _EventCaller.GetEventByID(Value);
            EventName = @event.EventName;
            await GetRapport(Value);
            GroupOneSort = GroupOneSortText;
            GroupTwoSort = GroupTwoSortText;
            ChipGroups = await _ChipGroupCaller.GetChipGroupsByEventId(Value);
            StateHasChanged();
        }
        else
        {
            navigationManager.NavigateTo("/", true);    //Returns to index site if no ID was submitted
        }

    }


    public async Task GetRapport(int result)
    {
        Rapports = await _RapportCaller.GetRapports(result);
    }

    public async Task DeleteScan(Scanning scan, int eventId)
    {

        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Er du sikker på du ville slette denne Skanning? \n\nDETTE KAN IKKE FORTRYDES ELLER GENDANNES."))
            return;

        await _ScanCaller.DeleteScan(scan.ScanningID);
        Scannings.Remove(Scannings.SingleOrDefault(i => i.ScanningID == scan.ScanningID));
        await GetRapport(eventId);
        StateHasChanged();

    }

    public async Task SortAfterGroupOne(string GroupName)
    {
        await GetRapport(Value);
        GroupOneSort = GroupName;
        if (GroupName != GroupOneSortText)
        {

            if (GroupTwoSort == GroupTwoSortText)
            {
                if (GroupOneSort == GroupOneSortText)
                {
                    await GetRapport(Value);
                }
                else
                {
                    Rapports = Rapports.Where(x => x.Group1 == GroupName).ToList();
                }

            }
            else
                await SortAfterBothGroups();

        }
        else if (GroupName == GroupTwoSortText && GroupOneSort == GroupOneSortText)
            await GetRapport(Value);
        else
            await SortAfterGroupTwo(GroupTwoSort);
        StateHasChanged();
    }

    public async Task SortAfterGroupTwo(string GroupName)
    {
        await GetRapport(Value);
        GroupTwoSort = GroupName;
        if (GroupName == GroupTwoSortText && GroupOneSort != GroupOneSortText)
            await SortAfterGroupOne(GroupOneSort);
        else if (GroupName == GroupTwoSortText && GroupOneSort == GroupOneSortText)
            await GetRapport(Value);

        else
        {
            GroupTwoSort = GroupName;
            if (GroupOneSort == GroupOneSortText)
            {

                Rapports = Rapports.Where(x => x.Group2 == GroupName).ToList();
            }
            else
            {
                await SortAfterBothGroups();
            }

        }
        StateHasChanged();
    }

    public async Task SortAfterBothGroups()
    {
        Rapports = Rapports.Where(x => x.Group1 == GroupOneSort && x.Group2 == GroupTwoSort).ToList();
    }

    public async void GetScans(int id)
    {
        ChipId = id;
        Scannings = await _ScanCaller.GetAllScanningsPerUser(id, Value);
        StateHasChanged();
    }

  
    public async Task ExportAllGroups()
    {
        //TODO: this needs to be a For and not a Foreach
        string groupNameOne = "", groupNameTwo = "";
        int counter = 0;
        foreach (var item in ChipGroups)
        {
            if (item.GroupNumber == 1)
                groupNameOne = item.GroupName;
            if (item.GroupNumber == 2)
                groupNameTwo = item.GroupName;

            if (groupNameOne != "" && groupNameTwo == "")
            {
                HiddenRapports = Rapports.Where(x => x.Group1 == groupNameOne).ToList();
                if (HiddenRapports.Count != 0)
                {
                    StateHasChanged();
                    await Task.Delay(1000);
                    await ExportHiddenCSVFile(groupNameOne);
                }
            }
            else if (groupNameOne == "" && groupNameTwo != "")
            {
                HiddenRapports = Rapports.Where(x => x.Group2 == groupNameTwo).ToList();
                if (HiddenRapports.Count != 0)
                {
                    StateHasChanged();
                    await Task.Delay(1000);
                    await ExportHiddenCSVFile(groupNameTwo);
                }
            }
            else if (groupNameTwo != "" && groupNameOne != "")
            {
                HiddenRapports = Rapports.Where(x => x.Group1 == GroupOneSort && x.Group2 == GroupTwoSort).ToList();
                if (HiddenRapports.Count != 0)
                {
                    StateHasChanged();
                    await Task.Delay(1000);
                    await ExportHiddenCSVFile(groupNameOne, groupNameTwo);
                }

            }


        }
    }


    #region Javascript
    protected async Task ExportCSVFile() => await _jsModule.InvokeVoidAsync("export_table_to_csv", "#table", EventName);

    protected async Task ExportHiddenCSVFile(string GroupName1, string groupName2) => await _jsModule.InvokeVoidAsync("export_table_to_csv", "#table-hidden", $"{EventName}: {GroupName1} + {groupName2}");
    protected async Task ExportHiddenCSVFile(string GroupName) => await _jsModule.InvokeVoidAsync("export_table_to_csv", "#table-hidden", $"{EventName}:{GroupName}");
    #endregion
}
