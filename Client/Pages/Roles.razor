@page "/Roles"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Identity

<div class="container">
    <div class="text-center mt-4 UserAdmin">

        <div class="table-header d-flex btn-res justify-content-between" style="margin-top:2rem;">
            <div class="d-flex">
                <h2>Bruger</h2>
                <button class="btn ml-5 mb-1 logoColor" @onclick='() => OpenCreateModal("ShowCreateModal")'>Opret</button>
                @* <button type="button" id="exportBtn" class="btn ml-5 mb-1 logoColor" @onclick="async () => await ExportToExcel()">Export tabel til Excel</button> *@
            </div>
            <div>
                <input class="form-control" type="text" id="search" @onkeypress="e => IsAlphabetKey(e)" @bind="SearchField" @oninput="(e => SearchField = e.Value.ToString())" @onkeyup="(e => {OnInitializedAsync(); CurrentPage = 1;})" placeholder="Søg på navn.." />
            </div>
        </div>
        <div class="TableScrollable">
            <table class="table table-striped" id="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Brugernavn</th>
                        <th>Navn</th>
                        <th>Mail</th>
                        @*  <th>Rolle</th> *@
                        <th>Handlinger</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in UsersDTO.Where(x => x.IsDeleted == false))
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.UserName</td>
                            <td>@item.Name</td>
                            <td>@item.Email</td>
                            @* <td>@GetRoleByRoleID(@item.RoleID)</td> *@
                            <td class="d-flex justify-content-center">
                               @*  <button class="hyperlink" @onclick="() => EditUser(item)">Rediger</button> |
                                <button type="button" class="hyperlink" @onclick="() => DeleteUserConf(item)">Slet</button>
 *@
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    @if (Count > 0 && TotalPages > 1)
                    {
                        <ul class="pagination">
                            @for (var i = 1; i <= TotalPages; i++)
                            {
                                int page = i;
                                <li class="page-item @(i == CurrentPage ? "active" : "")">
                                    <input type="button" @onclick="(e => {CurrentPage = page;OnInitializedAsync();})" class="page-link" value="@i" />
                                </li>
                            }
                        </ul>
                    }
                </tfoot>
            </table>
        </div>
    </div>
</div>
@code {

    #region Properties

    private List<User> UsersDTO { get; set; } = new();
    private List<User> UsersFull { get; set; } = new();
    private List<IdentityRole> RolesList { get; set; } = new();

    private string UserName { get; set; }
    private string OldUserName { get; set; }

    private string Name { get; set; }
    private string OldName { get; set; }

    private string ErrorField { get; set; }
    private string SuccessField { get; set; }

    private string SearchField { get; set; }


    private int CurrentPage { get; set; } = 1;
    private int Count { get; set; } = 0;
    private int TotalPages { get; set; }
    private int PageCount { get; set; } = 10;

    private IJSObjectReference _jsModule;
    private IJSObjectReference _jsSite;
    private IJSObjectReference _jsExcel;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Roles.js");
        _jsExcel = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/ExportCSV.js");
        _jsSite = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/site.js");

        if (!string.IsNullOrWhiteSpace(SearchField))
            await Search();
        else
            await GetLists();
    }

    protected async Task Search()
    {

        UsersDTO = await _UserCaller.SearchUser(CurrentPage, PageCount, SearchField);
        var tempUsers = await _AuthService.GetRoles();
        Count = tempUsers.Where(x => x.Name.Contains(SearchField) || x.Name.Contains(SearchField)).ToList().Count();

        StateHasChanged();

    }

    protected async Task GetLists()
    {
        var TempUsers = await _UserCaller.GetAllUsers();
        Count = TempUsers.Count();
        RolesList = await _AuthService.GetRoles();
        if (PageCount >= Count)
        {
            UsersDTO = await _UserCaller.UserPagination(1, PageCount);

        }
        else
        {
            UsersDTO = await _UserCaller.UserPagination(CurrentPage, PageCount);
        }

        TotalPages = (int)Math.Ceiling(decimal.Divide(Count, PageCount));
        StateHasChanged();

    }

    protected async Task IsAlphabetKey(KeyboardEventArgs e) => await _jsModule.InvokeVoidAsync("isAlphabetKey", e.Code);

    protected async Task OpenCreateModal(string modalName)
    {
        await _jsModule.InvokeVoidAsync("ShowCreateModal", modalName);
    }
}
